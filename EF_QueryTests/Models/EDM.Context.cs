//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EF_QueryTests.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class TSQL2012Entities : DbContext
    {
        public TSQL2012Entities()
            : base("name=TSQL2012Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Dim1> Dim1 { get; set; }
        public virtual DbSet<Dim2> Dim2 { get; set; }
        public virtual DbSet<Dim3> Dim3 { get; set; }
        public virtual DbSet<Document> Documents { get; set; }
        public virtual DbSet<Fact> Facts { get; set; }
        public virtual DbSet<Num> Nums { get; set; }
        public virtual DbSet<T1> T1 { get; set; }
        public virtual DbSet<Transaction> Transactions { get; set; }
        public virtual DbSet<WorkOut> WorkOuts { get; set; }
        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<Category> Categories { get; set; }
        public virtual DbSet<Product> Products { get; set; }
        public virtual DbSet<Supplier> Suppliers { get; set; }
        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<MyCustomer> MyCustomers { get; set; }
        public virtual DbSet<MyOrderDetail> MyOrderDetails { get; set; }
        public virtual DbSet<MyOrders1> MyOrders1 { get; set; }
        public virtual DbSet<OrderDetail> OrderDetails { get; set; }
        public virtual DbSet<Order> Orders { get; set; }
        public virtual DbSet<Shipper> Shippers { get; set; }
        public virtual DbSet<Score> Scores { get; set; }
        public virtual DbSet<Test> Tests { get; set; }
        public virtual DbSet<MyOrder> MyOrders { get; set; }
        public virtual DbSet<MyTestForDelete> MyTestForDeletes { get; set; }
        public virtual DbSet<CategoriesTest> CategoriesTests { get; set; }
        public virtual DbSet<MyView> MyViews { get; set; }
        public virtual DbSet<EmpOrder> EmpOrders { get; set; }
        public virtual DbSet<OrderTotalsByYearCustShip> OrderTotalsByYearCustShips { get; set; }
        public virtual DbSet<RankedProduct> RankedProducts { get; set; }
    
        [DbFunction("TSQL2012Entities", "GetNums")]
        public virtual IQueryable<GetNums_Result> GetNums(Nullable<long> low, Nullable<long> high)
        {
            var lowParameter = low.HasValue ?
                new ObjectParameter("low", low) :
                new ObjectParameter("low", typeof(long));
    
            var highParameter = high.HasValue ?
                new ObjectParameter("high", high) :
                new ObjectParameter("high", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetNums_Result>("[TSQL2012Entities].[GetNums](@low, @high)", lowParameter, highParameter);
        }
    
        [DbFunction("TSQL2012Entities", "GetManagers")]
        public virtual IQueryable<GetManagers_Result> GetManagers(Nullable<int> empid)
        {
            var empidParameter = empid.HasValue ?
                new ObjectParameter("empid", empid) :
                new ObjectParameter("empid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetManagers_Result>("[TSQL2012Entities].[GetManagers](@empid)", empidParameter);
        }
    
        [DbFunction("TSQL2012Entities", "GetTopProducts")]
        public virtual IQueryable<GetTopProducts_Result> GetTopProducts(Nullable<int> supplierid, Nullable<long> n)
        {
            var supplieridParameter = supplierid.HasValue ?
                new ObjectParameter("supplierid", supplierid) :
                new ObjectParameter("supplierid", typeof(int));
    
            var nParameter = n.HasValue ?
                new ObjectParameter("n", n) :
                new ObjectParameter("n", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetTopProducts_Result>("[TSQL2012Entities].[GetTopProducts](@supplierid, @n)", supplieridParameter, nParameter);
        }
    
        [DbFunction("TSQL2012Entities", "fn_FilteredExtension2")]
        public virtual IQueryable<fn_FilteredExtension2_Result> fn_FilteredExtension2(Nullable<short> lowqty, Nullable<short> highqty)
        {
            var lowqtyParameter = lowqty.HasValue ?
                new ObjectParameter("lowqty", lowqty) :
                new ObjectParameter("lowqty", typeof(short));
    
            var highqtyParameter = highqty.HasValue ?
                new ObjectParameter("highqty", highqty) :
                new ObjectParameter("highqty", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fn_FilteredExtension2_Result>("[TSQL2012Entities].[fn_FilteredExtension2](@lowqty, @highqty)", lowqtyParameter, highqtyParameter);
        }
    
        [DbFunction("TSQL2012Entities", "fn_OrderTotalsByYear")]
        public virtual IQueryable<fn_OrderTotalsByYear_Result> fn_OrderTotalsByYear(Nullable<int> orderyear)
        {
            var orderyearParameter = orderyear.HasValue ?
                new ObjectParameter("orderyear", orderyear) :
                new ObjectParameter("orderyear", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fn_OrderTotalsByYear_Result>("[TSQL2012Entities].[fn_OrderTotalsByYear](@orderyear)", orderyearParameter);
        }
    
        [DbFunction("TSQL2012Entities", "fn_OrderTotalsByYearCustShip")]
        public virtual IQueryable<fn_OrderTotalsByYearCustShip_Result> fn_OrderTotalsByYearCustShip(Nullable<int> lowqty, Nullable<int> highqty)
        {
            var lowqtyParameter = lowqty.HasValue ?
                new ObjectParameter("lowqty", lowqty) :
                new ObjectParameter("lowqty", typeof(int));
    
            var highqtyParameter = highqty.HasValue ?
                new ObjectParameter("highqty", highqty) :
                new ObjectParameter("highqty", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fn_OrderTotalsByYearCustShip_Result>("[TSQL2012Entities].[fn_OrderTotalsByYearCustShip](@lowqty, @highqty)", lowqtyParameter, highqtyParameter);
        }
    
        public virtual int MyProcedure(string categoryname, string description)
        {
            var categorynameParameter = categoryname != null ?
                new ObjectParameter("Categoryname", categoryname) :
                new ObjectParameter("Categoryname", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MyProcedure", categorynameParameter, descriptionParameter);
        }
    
        public virtual int InsertProducts(string productname, Nullable<int> supplierid, Nullable<int> categoryid, Nullable<decimal> unitprice, Nullable<bool> discontinued)
        {
            var productnameParameter = productname != null ?
                new ObjectParameter("productname", productname) :
                new ObjectParameter("productname", typeof(string));
    
            var supplieridParameter = supplierid.HasValue ?
                new ObjectParameter("supplierid", supplierid) :
                new ObjectParameter("supplierid", typeof(int));
    
            var categoryidParameter = categoryid.HasValue ?
                new ObjectParameter("categoryid", categoryid) :
                new ObjectParameter("categoryid", typeof(int));
    
            var unitpriceParameter = unitprice.HasValue ?
                new ObjectParameter("unitprice", unitprice) :
                new ObjectParameter("unitprice", typeof(decimal));
    
            var discontinuedParameter = discontinued.HasValue ?
                new ObjectParameter("discontinued", discontinued) :
                new ObjectParameter("discontinued", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertProducts", productnameParameter, supplieridParameter, categoryidParameter, unitpriceParameter, discontinuedParameter);
        }
    
        public virtual ObjectResult<GetCustomerOrders_Result> GetCustomerOrders(Nullable<int> custid)
        {
            var custidParameter = custid.HasValue ?
                new ObjectParameter("custid", custid) :
                new ObjectParameter("custid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCustomerOrders_Result>("GetCustomerOrders", custidParameter);
        }
    
        public virtual ObjectResult<ListCustomersByAddress_Result> ListCustomersByAddress(string address)
        {
            var addressParameter = address != null ?
                new ObjectParameter("address", address) :
                new ObjectParameter("address", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ListCustomersByAddress_Result>("ListCustomersByAddress", addressParameter);
        }
    
        public virtual ObjectResult<ListSampleResultsSets_Result> ListSampleResultsSets()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ListSampleResultsSets_Result>("ListSampleResultsSets");
        }
    
        public virtual ObjectResult<OrdersForCountry_Result> OrdersForCountry(string country)
        {
            var countryParameter = country != null ?
                new ObjectParameter("country", country) :
                new ObjectParameter("country", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<OrdersForCountry_Result>("OrdersForCountry", countryParameter);
        }
    
        public virtual int ProcessCustomer(Nullable<int> custid)
        {
            var custidParameter = custid.HasValue ?
                new ObjectParameter("custid", custid) :
                new ObjectParameter("custid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProcessCustomer", custidParameter);
        }
    }
}
